"""Tests for anyOf constraints generated by Required(Any(...)) patterns."""

import pytest
import voluptuous as vol

from voluptuous_openapi import convert, OpenApiVersion


def test_single_required_any_pattern():
    """Test basic Required(Any(...)) functionality with the task's specific schema."""
    schema = vol.Schema({
        # This represents the Required(Any(...)) constraint from required_slots
        vol.Required(vol.Any("color", "temperature", "brightness")): str,
        
        # These represent the individual optional_slots
        vol.Optional("color"): str,
        vol.Optional("temperature"): int,
        vol.Optional("brightness"): int,
        
        # Other standard slots that ServiceIntentHandler adds
        vol.Optional("name"): str,
        vol.Optional("area"): str,
        vol.Optional("floor"): str,
    })
    
    result = convert(schema)
    
    expected = {
        "type": "object",
        "properties": {
            "color": {"type": "string"},
            "temperature": {"type": "integer"},
            "brightness": {"type": "integer"},
            "name": {"type": "string"},
            "area": {"type": "string"},
            "floor": {"type": "string"},
        },
        "required": [],
        "anyOf": [
            {"required": ["color"]},
            {"required": ["temperature"]},
            {"required": ["brightness"]},
        ]
    }
    
    assert result == expected


def test_multiple_required_any_patterns_cartesian_product():
    """Test multiple Required(Any(...)) patterns generate Cartesian product of constraints.
    
    This should require at least one from each group:
    - At least one of ["color", "temperature", "brightness"] AND
    - At least one of ["mode", "preset"]
    """
    schema = vol.Schema({
        vol.Required(vol.Any("color", "temperature", "brightness")): str,
        vol.Required(vol.Any("mode", "preset")): str,
        vol.Optional("color"): str,
        vol.Optional("temperature"): int,
        vol.Optional("brightness"): int,
        vol.Optional("mode"): str,
        vol.Optional("preset"): str,
    })
    
    result = convert(schema)
    
    expected = {
        "type": "object",
        "properties": {
            "color": {"type": "string"},
            "temperature": {"type": "integer"},
            "brightness": {"type": "integer"},
            "mode": {"type": "string"},
            "preset": {"type": "string"},
        },
        "required": [],
        "anyOf": [
            {"required": ["color", "mode"]},
            {"required": ["color", "preset"]},
            {"required": ["temperature", "mode"]},
            {"required": ["temperature", "preset"]},
            {"required": ["brightness", "mode"]},
            {"required": ["brightness", "preset"]},
        ]
    }
    
    assert result == expected


def test_required_any_with_regular_required_and_optional_any():
    """Test edge cases: Required(Any(...)) + regular Required + Optional(Any(...))."""
    schema = vol.Schema({
        vol.Required("entity_id"): str,  # Regular required field
        vol.Required(vol.Any("color", "temperature")): str,  # Should generate anyOf
        vol.Optional(vol.Any("mode", "preset")): str,  # Should NOT generate anyOf
        vol.Optional("color"): str,
        vol.Optional("temperature"): int,
        vol.Optional("mode"): str,
        vol.Optional("preset"): str,
    })
    
    result = convert(schema)
    
    expected = {
        "type": "object",
        "properties": {
            "entity_id": {"type": "string"},
            "color": {"type": "string"},
            "temperature": {"type": "integer"},
            "mode": {"type": "string"},
            "preset": {"type": "string"},
        },
        "required": ["entity_id"],  # Only regular Required fields
        "anyOf": [  # Only from Required(Any(...))
            {"required": ["color"]},
            {"required": ["temperature"]},
        ]
    }
    
    assert result == expected


def test_complex_types_and_openapi_versions():
    """Test Required(Any(...)) with complex types and different OpenAPI versions."""
    schema = vol.Schema({
        vol.Required(vol.Any("simple_field", "complex_field")): vol.Any(str, int),
        vol.Optional("simple_field"): str,  # Overrides the Any(str, int) type
        vol.Optional("complex_field"): vol.All(int, vol.Range(min=1, max=100)),
    })
    
    # Test with OpenAPI 3.0
    result_v3 = convert(schema, openapi_version=OpenApiVersion.V3)
    
    # Test with OpenAPI 3.1
    result_v3_1 = convert(schema, openapi_version=OpenApiVersion.V3_1)
    
    expected = {
        "type": "object",
        "properties": {
            "simple_field": {"type": "string"},  # Overridden by Optional
            "complex_field": {"type": "integer", "minimum": 1, "maximum": 100},
        },
        "required": [],
        "anyOf": [
            {"required": ["simple_field"]},
            {"required": ["complex_field"]},
        ]
    }
    
    # Should be identical for both versions for this case
    assert result_v3 == expected
    assert result_v3_1 == expected